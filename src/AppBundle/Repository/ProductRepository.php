<?php

namespace AppBundle\Repository;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 * @author Saswati
 *
 * @category Repository
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{

	/**
    * 
    * get products
    * It is used to fetch product data from database on given filters.
    *
    * @param array $data array of coloum name and its values
    * @return array $result containing required data.
    */
    public function getProducts($value = null)
    {
        $query = $this->createQueryBuilder('p')
                    ->select('p.sku as userid')
                    ->addSelect('p.name')
                    ->addSelect('p.description')
                    ->addSelect('p.level')
                    ->addSelect('p.taxable')
                    ->addSelect('p.unit_price')
                    ->addSelect('p.level')
                    ->addSelect('p.quantity_on_hand')
                    ->addSelect('p.reorder_point')
                    ->addSelect('t.name as type')
                    ->addSelect('v.name as vendor')
                    ->innerJoin('AppBundle:Vendor', 'v', 'WITH', 'p.prefered_vendor_id = v.id')
                    ->innerJoin('AppBundle:Type', 't', 'WITH', 'p.type = t.id')
                    ->innerJoin('AppBundle:ItemCategoryType', 'ct', 'WITH', 'p.item_category_type = ct.id');
        if($value['name']){
            $query->Where('p.name = :name')
                ->setParameter('name', $value['name']);
        }
        if($value['category']){
            $query->andWhere('ct.name = :name')
                ->setParameter('name', $value['category']);
        }
                             
        return $query->getQuery()->getResult();
    }
}
